# -*- coding: utf-8 -*-
"""Taller_Econometria_Johan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eJL9RO2yl7KmBCdEr1917YKaFq1aZ0fG

# Taller Johan Stewart Fierro Mart√≠nez 
Econometria 26 abril
"""

!pip install wooldridge #instalar libreria

import pandas as pd #manipular datos

import numpy as np

import wooldridge as wd

wage = wd.data('wage1')[['wage','educ','exper']]

wage

y = wage['wage'].to_numpy()
y

x = wage[['educ', 'exper']].to_numpy()

x

X = np.c_[np.ones(len(x)), x] #np.c_ es para concatenar | numero de unos es el largo de x

X

X.T #X traspuesta X

X.T.dot(X) #multiplicar x traspuesta x

np.linalg.inv(X.T.dot(X)) #para calcular la inversa de x traspuesta x

betas = np.linalg.inv(X.T.dot(X)).dot(X.T.dot(y)) #np.linalg.inv(X.T.dot(X)) es la inversa traspuesta "X"  * (X.T.dot(y)) es x traspuesta "Y"  | tiene un rasgo estocastico

betas

y_estimado = X.dot(betas)
y_estimado

u_estimado = y - y_estimado
u_estimado

Utraspuesta = u_estimado.T.dot(u_estimado)

n,k=X.shape

varianza= Utraspuesta / (n-k)

varianza

error_estandar = np.diag(np.sqrt(varianza * np.linalg.inv(X.T.dot(X))))

error_estandar

t_estadistico = betas / error_estandar
t_estadistico

intervalos_confianza = np.array([betas - t_estadistico * error_estandar,
                                 betas + t_estadistico * error_estandar]).T

intervalos_confianza

"""- Constante: es estadisticamente significativo
- Educacion: es estadisticamente significativo
- Experiencia: es estadisticamente significativo
"""